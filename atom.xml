<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Weishu's Notes]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-11-18T07:04:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[weishu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[获取迅雷会员工作流]]></title>
    <link href="http://yoursite.com/2015/11/18/xunlei-vip-account-workflow/"/>
    <id>http://yoursite.com/2015/11/18/xunlei-vip-account-workflow/</id>
    <published>2015-11-18T06:59:44.000Z</published>
    <updated>2015-11-18T07:04:56.000Z</updated>
    <content type="html"><![CDATA[<p>mac下的P2P下载工具目前只有迅雷了，可是大家都知道mac下只有“会员迅雷”才能下载，没会员就是个废物。对于冷门资源离线下载还是是非常非常有用的，高速下载对速度提升也是显而易见。</p>
<p>想必都不会为了临时下载一个资源去开一个会员，肯定有过上网搜迅雷会员的经历；这里教大家如何把这个过程变成一个自动化的工作。<strong>如果长期使用迅雷的话，建议还是开会员去；本教程仅供学习使用，用完请于24小时之内删除</strong></p>
<p>先看看效果：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdownxunleivip.gif" alt="效果图" width="721"></p>
<a id="more"></a>
<h2 id="获取免费迅雷账号的地址">获取免费迅雷账号的地址</h2><p>随便百度一下，就能找到一堆免费迅雷会员分享的地址，具体就不指出了；然后把每天最新的账号分享信息抓取出来。</p>
<p>这里使用python，可以用<code>pyquery</code>来解析网页，然后一个正则匹配就拿到了结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, urllib, re</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> workflow <span class="keyword">import</span> Workflow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_url = <span class="string">'http://www.xunleihuiyuan.net/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(wf)</span>:</span></span><br><span class="line">    args = wf.args</span><br><span class="line"></span><br><span class="line">    results = _get_from_web()</span><br><span class="line">    map(<span class="keyword">lambda</span> (x,y):wf.add_item(<span class="string">u'账号:%s'</span> % x, <span class="string">u'密码:%s'</span> % y, arg=<span class="string">u'%s %s'</span> %(x,y), valid=<span class="keyword">True</span>), results)</span><br><span class="line">    wf.send_feedback()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_today_url</span><span class="params">()</span>:</span></span><br><span class="line">    home = urllib.urlopen(_url).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> pq(home)(<span class="string">'.cate1 .post-title a'</span>)[<span class="number">0</span>].get(<span class="string">'href'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_from_web</span><span class="params">()</span>:</span></span><br><span class="line">    page = urllib.urlopen(_get_today_url()).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    results = r = pq(page)(<span class="string">'.formattext div'</span>).text()</span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">ur'\u8d26\u53f7(\S+)\u5bc6(\w+)'</span>, results)</span><br></pre></td></tr></table></figure></p>
<h2 id="用Alfred_workflow展示出来">用Alfred workflow展示出来</h2><p>使用python的alfred workflow sdk的话非常简单，文档在<a href="http://alfredworkflow.readthedocs.org/en/develop/index.html" target="_blank" rel="external">这里</a></p>
<p>这里要处理的一个问题是，账号和密码如何简单滴传递出来；一起放在剪切版肯定不太合适。幸好alfred自带剪切版历史的功能，我们分别两次把账号和密码复制到剪切版，要使用的时候，激活<code>cmd + option + c</code>然后从剪切版历史里面选择账号密码即可：效果如下：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/test/1447827801109.png" width="514"><br>然后，按下<code>cmd + 2</code>得到账号，<code>cmd + 3</code>得到密码！具体代码比较简单：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import subprocess,<span class="tag">time</span></span><br><span class="line">query = <span class="string">"&#123;query&#125;"</span></span><br><span class="line">def <span class="function"><span class="title">copy_osx</span><span class="params">(text)</span></span>:</span><br><span class="line">        <span class="tag">p</span> = subprocess.<span class="function"><span class="title">Popen</span><span class="params">([<span class="string">'pbcopy'</span>, <span class="string">'w'</span>], stdin=subprocess.PIPE, close_fds=True)</span></span></span><br><span class="line">        <span class="tag">p</span>.<span class="function"><span class="title">communicate</span><span class="params">(input=text.encode(<span class="string">'utf-8'</span>)</span></span>)</span><br><span class="line">account, pwd = query.<span class="function"><span class="title">split</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">copy_osx</span><span class="params">(account)</span></span></span><br><span class="line"><span class="tag">time</span>.<span class="function"><span class="title">sleep</span><span class="params">(<span class="number">0.3</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">copy_osx</span><span class="params">(pwd)</span></span></span><br></pre></td></tr></table></figure></p>
<p>这样，一个简单的迅雷会员获取工作流就完成了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>mac下的P2P下载工具目前只有迅雷了，可是大家都知道mac下只有“会员迅雷”才能下载，没会员就是个废物。对于冷门资源离线下载还是是非常非常有用的，高速下载对速度提升也是显而易见。</p>
<p>想必都不会为了临时下载一个资源去开一个会员，肯定有过上网搜迅雷会员的经历；这里教大家如何把这个过程变成一个自动化的工作。<strong>如果长期使用迅雷的话，建议还是开会员去；本教程仅供学习使用，用完请于24小时之内删除</strong></p>
<p>先看看效果：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdownxunleivip.gif" alt='效果图' width="721" /></p>]]>
    
    </summary>
    
      <category term="alfred workflow" scheme="http://yoursite.com/tags/alfred-workflow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java高效分割字符串]]></title>
    <link href="http://yoursite.com/2015/11/10/fast-split-in-android/"/>
    <id>http://yoursite.com/2015/11/10/fast-split-in-android/</id>
    <published>2015-11-10T10:52:34.000Z</published>
    <updated>2015-11-11T02:19:52.000Z</updated>
    <content type="html"><![CDATA[<p>最近优化一段代码的调用时间，发现性能瓶颈居然是io和split！io操作慢情有可原，那么对于split有没有更高效的方法呢？</p>
<h2 id="一般方法">一般方法</h2><p>再java里面，一般的split 字符串解决方案有三种：</p>
<ol>
<li>直接用split函数</li>
<li>使用StingTokenizer类</li>
<li>用<code>indexOf,subString</code>实现；</li>
</ol>
<p>在JDK6的实现中，String类的split直接使用了正则表达式；不得不说，真是杀鸡焉用牛刀。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex, <span class="keyword">int</span> limit) &#123;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(regex).split(<span class="keyword">this</span>, limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在Android VM(Android 4.0以上系统源码如此)里面，对这个方法做了一定的优化：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regularExpression, <span class="keyword">int</span> limit) &#123;</span><br><span class="line">       String[] result = java.util.regex.Splitter.fastSplit(regularExpression, <span class="keyword">this</span>, limit);</span><br><span class="line">       <span class="keyword">return</span> result != <span class="keyword">null</span> ? result : Pattern.compile(regularExpression).split(<span class="keyword">this</span>, limit);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>使用正则的话，效率肯定是有问题的；具体我们看一看就知道了。<code>StringTokenizer</code>是一个流式解析类，虽然JDK已经deprecated很久了，但是还是无法阻止大量的开源库使用这个类，效果自然得到了广泛的认可；另外呢，对于简单的分隔符，比如空格，单个字符等，可以直接使用<code>indexOf</code>得到索引，然后用<code>subString</code>得到字串；在这种情况下，理论上效率比上述两种高出很多；首先<code>indexOf</code>这个查找操作肯定是<code>o(logn)</code>，然后，求字串最多也是线性操作。具体效率如何，测试一下就知道了。</p>
<h2 id="测试">测试</h2><p>我们选择的测试字符串对象，是<code>ps</code>得到的输出，然后，写一个测试类，然后在Android下面运行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSplitter</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String line =</span><br><span class="line">            <span class="string">"root      1     0     572    436   c014bbc4 00011304 S /init"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNS = <span class="number">1000000</span>;<span class="comment">// 000000;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLUMNS = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] splitBySplit() &#123;</span><br><span class="line">        <span class="keyword">return</span> line.split(<span class="string">"\\s+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">splitByIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] lp = getPsLinePos(line);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">1</span>; i1 &lt; COLUMNS - <span class="number">1</span>; i1++) &#123;</span><br><span class="line">            l.add(line.substring(lp[i1 - <span class="number">1</span>], lp[i1]));</span><br><span class="line">        &#125;</span><br><span class="line">        l.add(line.substring(lp[COLUMNS - <span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] sPos;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">splitByIndex2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sPos == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sPos = getPsLinePos(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">1</span>; i1 &lt; COLUMNS - <span class="number">1</span>; i1++) &#123;</span><br><span class="line">            l.add(line.substring(sPos[i1 - <span class="number">1</span>], sPos[i1]));</span><br><span class="line">        &#125;</span><br><span class="line">        l.add(line.substring(sPos[COLUMNS - <span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getPsLinePos(String line) &#123;</span><br><span class="line">        <span class="comment">// 以下是为了得到每一列的pos;不在循环里面判空,节省调用</span></span><br><span class="line">        <span class="keyword">int</span>[] lp = <span class="keyword">new</span> <span class="keyword">int</span>[COLUMNS];</span><br><span class="line">        lp[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 第一个起点是开始</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> lastChar;</span><br><span class="line">        <span class="keyword">char</span> curChar;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = line.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">            lastChar = line.charAt(j - <span class="number">1</span>);</span><br><span class="line">            curChar = line.charAt(j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (index + <span class="number">1</span> &gt;= COLUMNS) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lastChar == <span class="string">' '</span> &amp;&amp; curChar != <span class="string">' '</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果是从空格突变为非空格,那么就是起始点</span></span><br><span class="line">                lp[++index] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">splitByTokenizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">16</span>);</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(line);</span><br><span class="line">        <span class="keyword">while</span> (st.hasMoreTokens()) &#123;</span><br><span class="line">            l.add(st.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; RUNS; i++) &#123;</span><br><span class="line">            test.run();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s use time: %s(ms)"</span>, test.tag, System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Test split = <span class="keyword">new</span> Test(<span class="string">"Split"</span>) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                splitBySplit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Test string = <span class="keyword">new</span> Test(<span class="string">"StringTokenizer"</span>) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                splitByTokenizer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Test index = <span class="keyword">new</span> Test(<span class="string">"indexOf"</span>) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                splitByIndex();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Test index2 = <span class="keyword">new</span> Test(<span class="string">"indexOf2"</span>) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                splitByIndex2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        test(split);</span><br><span class="line">        test(string);</span><br><span class="line">        test(index);</span><br><span class="line">        test(index2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String tag;</span><br><span class="line"></span><br><span class="line">        Test(String tag) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tag = tag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="结果">结果</h2><p>代码有点长，能用lambda就简洁了，这时后话；看一看性能表现如何（以下使用的是Htc x920e 4.4.2系统测试的）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I/System.out﹕ Split <span class="operator"><span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">2267</span>(ms)</span><br><span class="line"><span class="keyword">I</span>/<span class="keyword">System</span>.<span class="keyword">out</span>﹕ StringTokenizer <span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">326</span>(ms)</span><br><span class="line"><span class="keyword">I</span>/<span class="keyword">System</span>.<span class="keyword">out</span>﹕ indexOf <span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">218</span>(ms)</span><br><span class="line"><span class="keyword">I</span>/<span class="keyword">System</span>.<span class="keyword">out</span>﹕ indexOf2 <span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">157</span>(ms)</span></span><br></pre></td></tr></table></figure></p>
<p>这下体会到split有多么慢了吧！<code>StringTokenizer</code>与<code>indexOf</code>时间在一个数量级，优化后的indexOf稍微好点，大致快一倍。</p>
<h2 id="结论">结论</h2><ol>
<li>在split需要被大量调用的场合，在现有的Android VM里面，<code>String</code>类的<code>split</code>方法<strong>肯定是不符合要求的</strong></li>
<li><code>StringTokenizer</code>是最廉价的替换split的方法，简单修改成这个实现之后，花费时间能提升一个数量级；</li>
<li><code>indexOf</code>结合<code>subString</code>经过充分的优化，对于<strong>结构化</strong>特别是<strong>表格类</strong>的数据，效率是最快的，对于特定场合，可以考虑使用这种方法，速度大致提升一倍。</li>
</ol>
<h2 id="题外话">题外话</h2><h3 id="JDK8">JDK8</h3><p>自己的mac上面装的是jdk8，我看了一下String在上面的实现，如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex, <span class="keyword">int</span> limit) &#123;</span><br><span class="line">        <span class="comment">/* fastpath if the regex is a</span><br><span class="line">         (1)one-char String and this character is not one of the</span><br><span class="line">            RegEx's meta characters ".$|()[&#123;^?*+\\", or</span><br><span class="line">         (2)two-char String and the first char is the backslash and</span><br><span class="line">            the second is not the ascii digit or ascii letter.</span><br><span class="line">         */</span></span><br><span class="line">        <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (((regex.value.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">             <span class="string">".$|()[&#123;^?*+\\"</span>.indexOf(ch = regex.charAt(<span class="number">0</span>)) == -<span class="number">1</span>) ||</span><br><span class="line">             (regex.length() == <span class="number">2</span> &amp;&amp;</span><br><span class="line">              regex.charAt(<span class="number">0</span>) == <span class="string">'\\'</span> &amp;&amp;</span><br><span class="line">              (((ch = regex.charAt(<span class="number">1</span>))-<span class="string">'0'</span>)|(<span class="string">'9'</span>-ch)) &lt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">              ((ch-<span class="string">'a'</span>)|(<span class="string">'z'</span>-ch)) &lt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">              ((ch-<span class="string">'A'</span>)|(<span class="string">'Z'</span>-ch)) &lt; <span class="number">0</span>)) &amp;&amp;</span><br><span class="line">            (ch &lt; Character.MIN_HIGH_SURROGATE ||</span><br><span class="line">             ch &gt; Character.MAX_LOW_SURROGATE))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> off = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line">            boolean limited = limit &gt; <span class="number">0</span>;</span><br><span class="line">            ArrayList&lt;String&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> ((next = indexOf(ch, off)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!limited || <span class="built_in">list</span>.size() &lt; limit - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">list</span>.add(substring(off, next));</span><br><span class="line">                    off = next + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// last one</span></span><br><span class="line">                    <span class="comment">//assert (list.size() == limit - 1);</span></span><br><span class="line">                    <span class="built_in">list</span>.add(substring(off, value.length));</span><br><span class="line">                    off = value.length;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// If no match was found, return this</span></span><br><span class="line">            <span class="keyword">if</span> (off == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="keyword">this</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add remaining segment</span></span><br><span class="line">            <span class="keyword">if</span> (!limited || <span class="built_in">list</span>.size() &lt; limit)</span><br><span class="line">                <span class="built_in">list</span>.add(substring(off, value.length));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Construct result</span></span><br><span class="line">            <span class="keyword">int</span> resultSize = <span class="built_in">list</span>.size();</span><br><span class="line">            <span class="keyword">if</span> (limit == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (resultSize &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">list</span>.get(resultSize - <span class="number">1</span>).length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    resultSize--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] result = <span class="keyword">new</span> String[resultSize];</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>.subList(<span class="number">0</span>, resultSize).toArray(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(regex).split(<span class="keyword">this</span>, limit);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的实现可以看到：<strong>对于单个字符或者两个字符（后面限制条件不翻译了）作为分割的时候，JDK对它进行了优化！</strong>，看一看在JDK8上面的结论：（需要把那个正则替换成空格）<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Split <span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">43</span>(ms)</span><br><span class="line">StringTokenizer <span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">15</span>(ms)</span><br><span class="line">indexOf <span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">14</span>(ms)</span><br><span class="line">indexOf2 <span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">7</span>(ms)</span><br></pre></td></tr></table></figure></p>
<p>效果惊人！！硬生生拉到了一个数量级！所以说，<strong>没事升级下JDK还是很有必要的，免费的午餐不过如此</strong>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近优化一段代码的调用时间，发现性能瓶颈居然是io和split！io操作慢情有可原，那么对于split有没有更高效的方法呢？</p>
<h2 id="一般方法">一般方法</h2><p>再java里面，一般的split 字符串解决方案有三种：</p>
<ol>
<li>直接用split函数</li>
<li>使用StingTokenizer类</li>
<li>用<code>indexOf,subString</code>实现；</li>
</ol>
<p>在JDK6的实现中，String类的split直接使用了正则表达式；不得不说，真是杀鸡焉用牛刀。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex, <span class="keyword">int</span> limit) &#123;</span><br><span class="line">        <span class="keyword">return</span> Pattern.compile(regex).split(<span class="keyword">this</span>, limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在Android VM(Android 4.0以上系统源码如此)里面，对这个方法做了一定的优化：<br>]]>
    
    </summary>
    
      <category term="split" scheme="http://yoursite.com/tags/split/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何安全地打印日志]]></title>
    <link href="http://yoursite.com/2015/10/19/how-to-log-safely-in-android/"/>
    <id>http://yoursite.com/2015/10/19/how-to-log-safely-in-android/</id>
    <published>2015-10-19T12:28:02.000Z</published>
    <updated>2015-10-19T12:47:36.000Z</updated>
    <content type="html"><![CDATA[<p>如何打印日志？这不是很简单，直接使用<code>android.util.Log</code>这个类不就行了？然而，日志属于非常敏感的信息；逆向工程师在逆向你的程序的时候，本来需要捕捉你程序的各种输出，然后进行推测，顺藤摸瓜然后得到需要的信息；一旦你的日志泄漏，无异于门户洞开，破解你的程序如入无人之境。<br>安全的概念本来就是相对的，如果破解你程序的代价远远大于破解得到的价值，那么就可以认为程序是“安全的”；这里就分析一下，为了提高程序的安全性，在打印日志的时候应该注意什么。</p>
<a id="more"></a>
<p>首先看看绝大部分公司以及开发者的做法：</p>
<h2 id="日志开关＋日志类">日志开关＋日志类</h2><p>为了在release版本里面没有日志输出，一个最简单的想法是：把所有打印日志的语句放在一个<code>if(DEBUG)</code>的语句里面；在日常开发的时候，<code>DEBUG</code>开关打开，发布正式版本的时候关闭这个开关即可，大致思路如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LogUtil.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">true</span>;<span class="comment">// 发布的时候修改为false</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (DEBUG) android.util.Log.d(TAG, msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 其他debug方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来看一个真实的例子，国外的一个apk，名字叫做powerclean；包名：com.lionmobi.powerclean;我们安装这个包；发现很正常，没有任何日志输出；然后我们逆向这个apk；随便翻看几个类，发现很多地方有类似日志输出：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/1445243591752.png" width="552"><br>我们打开这个叫做x的类，虽然被混淆过了，但是意思很明白，跟我们上面的思路一样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lionmobi.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">x</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        x.a = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String arg1, String arg2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.a) &#123;</span><br><span class="line">            Log.d(arg1, arg2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String arg1, String arg2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.a) &#123;</span><br><span class="line">            Log.e(arg1, arg2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String arg1, String arg2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.a) &#123;</span><br><span class="line">            Log.i(arg1, arg2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是一个真实的例子，而且这个app的用户还不少；接下来我们看看这种方式有什么问题。</p>
<h2 id="静态反编译打开日志开关">静态反编译打开日志开关</h2><p>上面的那种方式有一个问题：虽然在release版本里面，确实没有日志输出；但是<strong>输出日志的代码依然存在，只是没有执行到！(if条件不成立)</strong>所以，有没有办法让这些代码执行到呢？简单来说，就是能不能在release版本里面把这个<code>DEBUG</code>变量弄成<code>true</code>呢？当然可以！而且做法还非常简单。</p>
<p>我们使用<code>apktool</code>反编译得到这个apk的smali代码；然后上面的反编译告诉我们，这个日志类的位置是：<code>com.lionmobi.util.x</code>我们打开这个x.smali文件，内容如下：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lcom/lionmobi/util/x;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># static fields</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span> a:Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># direct methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> static</span><span class="keyword"> constructor</span><span class="function"> &lt;clinit&gt;(</span><span class="function">)</span>V</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v0</span>, 0x0 <span class="comment"># 修改为0x1 (True)</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> sput-boolean </span><span class="variable">v0</span>, <span class="class">Lcom/lionmobi/util/x;</span>-&gt;a:Z <span class="comment">#初始化位置</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> return-void</span><br><span class="line"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span><span class="function"> d(</span><span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span><span class="function">)</span>V</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> sget-boolean </span><span class="variable">v0</span>, <span class="class">Lcom/lionmobi/util/x;</span>-&gt;a:Z</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> if-eqz </span><span class="variable">v0</span>,<span class="keyword"> :cond_0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-static </span>&#123;<span class="variable">p0</span>, <span class="variable">p1</span>&#125;, <span class="class">Landroid/util/Log;</span><span class="function">-&gt;d(</span><span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span><span class="function">)</span>I</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> :cond_0</span></span><br><span class="line">   <span class="instruction"> return-void</span><br><span class="line"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span><span class="function"> e(</span><span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span><span class="function">)</span>V</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> sget-boolean </span><span class="variable">v0</span>, <span class="class">Lcom/lionmobi/util/x;</span>-&gt;a:Z</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> if-eqz </span><span class="variable">v0</span>,<span class="keyword"> :cond_0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-static </span>&#123;<span class="variable">p0</span>, <span class="variable">p1</span>&#125;, <span class="class">Landroid/util/Log;</span><span class="function">-&gt;e(</span><span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span><span class="function">)</span>I</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> :cond_0</span></span><br><span class="line">   <span class="instruction"> return-void</span><br><span class="line"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span><span class="function"> i(</span><span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span><span class="function">)</span>V</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> sget-boolean </span><span class="variable">v0</span>, <span class="class">Lcom/lionmobi/util/x;</span>-&gt;a:Z</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> if-eqz </span><span class="variable">v0</span>,<span class="keyword"> :cond_0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-static </span>&#123;<span class="variable">p0</span>, <span class="variable">p1</span>&#125;, <span class="class">Landroid/util/Log;</span><span class="function">-&gt;i(</span><span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span><span class="function">)</span>I</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> :cond_0</span></span><br><span class="line">   <span class="instruction"> return-void</span><br><span class="line"></span><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure></p>
<p>很明白，那个叫做<code>a</code>的静态变量就是我们的开关， 它的初始化在哪个静态代码块里面；新建了一个局部变量0x0然后赋值给了<code>a</code>；因此，我们<strong>把这个0x0修改为0x1</strong>就打开了这个开关。很简单吧，接下来我们把修改好的smali打包回去，然后签名得到一个新的可以运行的apk；运行一下看看结果。果然，一大堆的日志输出了出来，你的程序每一步在干什么都自己告诉别人了，都不需要去猜；我就随便截个图，感受下：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/1445245047558.png" width="1235"></p>
<h2 id="让release版本里面不包含日志代码">让release版本里面不包含日志代码</h2><p>从上面的分析我们得到一个结论：<strong>如果需要程序是“日志安全的”，那么release版本里面不应该存在输出日志的代码</strong>。</p>
<p>如何做到这一点呢？我们可以做一个工具，开发的时候，正常打印日志；一旦需要发布版本，把所有打印日志的语句代码，全部删除掉。代码很简单，用一些正则表达式就可以做到。</p>
<p>事实上，我们也可以使用一些别的工具，来实现这个类似的功能；那就是<code>proguard</code>；提到这个工具，很多认只是觉得他是一个代码混淆的工具，实际上，<strong>它还可以帮你剔除无用代码！</strong>什么样的代码是无用代码呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">	<span class="comment">// statement;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>类似于这样，静态编译的时候被认为“永远不会执行的代码”，就被认为是无用代码，会被这个工具直接优化掉，生成的class文件里面，这个if语句直接就没有了。这个功能，完美符合我们的需求；我们只需要把输出日志的代码用这样的if语句包围起来，然后release的时候肯定会用这个工具混淆；然后，在release版本里面，所有的输出日志的代码全部都没有了！不会像以前一样，留下一个影子，只是不做事。</p>
<h2 id="正确的做法">正确的做法</h2><p>最终，我们所有打印日志的语句应该如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">true</span>; <span class="comment">// 必须是static final 也就是常量，这样才能在编译器优化；删除if块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">	android.util.Log.d(TAG, <span class="string">"msg to print"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后，使用proguard优化代码即可。<br>看起来简单，好像也与最初的“日志开关”没有什么区别，仔细分析一下：</p>
<h3 id="日志开关必须是静态常量">日志开关必须是静态常量</h3><p>对比一下正确的做法与最开始的日志开关，一个是一个<strong>静态变量</strong>，一个是<strong>静态常量</strong>；如果是<strong>常量</strong>的话，那么就是永远不变的，那么当<code>DEBUG</code>变量为<code>False</code>的时候proguard可以理所当然地认为，这一部分代码时绝对不会被执行的，这样，打印日志的语句就会被优化（删除）掉；如果是一个变量，那么在运行期间就有可能改变它的值（private仅仅是对于程序员的改变，对于编译器以及运行时，没有什么改不了），这样proguard就会置之不理，这样你的日志代码就暴露出来了，一字之差，失之千里。</p>
<h3 id="抛弃日志类">抛弃日志类</h3><p>假设我们使用了静态常量代码块以及proguard优化代码的技术；但是依然采用上面的日志类的技术，会发生什么呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (DEBUG) android.util.Log.d(tag, msg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我写了一个demo，自己打包然后反编译，得到这个日志类如下（为了方便看，没有混淆）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag, String msg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们看到，if代码块已经没有了，确实不会输出任何日志；但是，我们看看调用这个类的地方！<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/1445247504072.png" width="575"></p>
<p>这个<code>LogUtil.d</code>的调用，无异于掩耳盗铃；虽然破解者没办法让<code>android.util.Log</code>这个类输出任何日志，但是你这里的这个调用还是告诉了别人你在干什么；所以，要屏蔽日志的输出，必须使用if代码块直接包含要被剔除的日志。上面的那个日志类，要被优化掉，那就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">	LogUtil.d(TAG, <span class="string">"msg"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里，不是多此一举吗，写一个日志类就是想不想重复地写<code>if (DEBUG)</code>，这里为了使这一句隐藏，还是逃不掉；但是很抱歉，逃得了和尚逃不了庙，这种方法没办法做到完全隐藏信息；<strong>必须抛弃日志类包裹日志代码的做法！</strong></p>
<h3 id="解放双手的补充">解放双手的补充</h3><p>也许有人说，为了这个所谓的日志安全，每次输出日志都的写一个if语句，那不麻烦死；简直反人类，我懒！实际上，要少写几行代码，我们可以选择复用（代码级别，比如上面的日志类），也可以选择<strong>生成</strong>（直接生成代码）；在支持元编程的语言里面，生成代码是很常见的事情，比如C＋＋的模版元编程以及ruby吹嘘的<code>DSL</code>能力；这里没有那么高大上，用代码生成代码，我们直接借助编辑器帮助我们少写几行代码万事。</p>
<h4 id="IDEA/Android_Studio">IDEA/Android Studio</h4><p>可以使用live template的功能；比如我的做法是，写一个<code>ifd</code>的template，每次我输入<code>ifd</code>然后自动展开成if语句，光标停在最中间：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown1445258458.gif" width="402"></p>
<h4 id="vim/emacs">vim/emacs</h4><p>可以使用宏录制的功能，实现上面的live template。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如何打印日志？这不是很简单，直接使用<code>android.util.Log</code>这个类不就行了？然而，日志属于非常敏感的信息；逆向工程师在逆向你的程序的时候，本来需要捕捉你程序的各种输出，然后进行推测，顺藤摸瓜然后得到需要的信息；一旦你的日志泄漏，无异于门户洞开，破解你的程序如入无人之境。<br>安全的概念本来就是相对的，如果破解你程序的代价远远大于破解得到的价值，那么就可以认为程序是“安全的”；这里就分析一下，为了提高程序的安全性，在打印日志的时候应该注意什么。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="log" scheme="http://yoursite.com/tags/log/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简化markdown写作中的贴图流程]]></title>
    <link href="http://yoursite.com/2015/10/16/simplify-the-img-upload-in-markdown/"/>
    <id>http://yoursite.com/2015/10/16/simplify-the-img-upload-in-markdown/</id>
    <published>2015-10-16T06:15:09.000Z</published>
    <updated>2015-11-11T08:01:16.000Z</updated>
    <content type="html"><![CDATA[<p>markdown写作的时候，图片插入是一件比较麻烦的事情。常见的流程如下：</p>
<ol>
<li>用截图工具截图；</li>
<li>将截图保存到某个地方</li>
<li>修改截图文件名</li>
<li>上传截图到某个图床（如果不用“围脖是个好图床”这样的工具，还得用客户端登陆）</li>
<li>拿到图床上的截图的链接；然后用markdown格式插入图片</li>
</ol>
<p>这么复杂的流程，让人简直没有了插入图片的欲望；但是大量的文字没有图片，必然让人疲惫；</p>
<p>要是能<strong>随便截个图，然后直接粘贴就成了markdown格式</strong>就好了；自然是能够做到！懒就是生产力～<br><a id="more"></a></p>
<h2 id="效果预览">效果预览</h2><p>首先看看最终达到的效果：<br><img alt="效果预览" src="http://7sbqce.com1.z0.glb.clouddn.com/markdownmarkdownimg.gif" width="660"></p>
<p>第一步，截图；第二步，粘贴；done!</p>
<p>详见github介绍：<a href="https://github.com/tiann/markdown-img-upload" target="_blank" rel="external">https://github.com/tiann/markdown-img-upload</a></p>
<h2 id="图片上传">图片上传</h2><h3 id="准备工作">准备工作</h3><p>首先要做的是，简化上传图片到图床这个手工的过程，甚至连拖动图片到浏览器插件都省略；这里就自然少不了使用图床的SDK，用代码来帮助我们完成上传操作；</p>
<p>这里选择七牛的图床，各种语言的SDK都有，还有免费10G空间，每个月10G流量，业界良心！注册点<a href="https://portal.qiniu.com/signup?code=3ldifp9oti442" target="_blank" rel="external">这里</a></p>
<p>然后新建一个空间，比如我的叫做booluimg，然后点击空间设置里面的域名设置，看看域名是什么，那么以后我的图片就会上传到 <a href="http://7sbqce.com1.z0.glb.clouddn.com/" target="_blank" rel="external">http://7sbqce.com1.z0.glb.clouddn.com/</a></p>
<h3 id="用SDK上传图片">用SDK上传图片</h3><p>使用七牛提供的python SDK，下面的代码可以将一个文件上传到七牛的空间：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> qiniu <span class="keyword">import</span> Auth, put_file</span><br><span class="line"></span><br><span class="line">access_key = <span class="string">'你的Access key'</span> <span class="comment"># AK</span></span><br><span class="line">secret_key = <span class="string">'你的Secret Key'</span> <span class="comment"># SK</span></span><br><span class="line"></span><br><span class="line">bucket_name = <span class="string">'booluimg'</span> <span class="comment"># 七牛空间名</span></span><br><span class="line"></span><br><span class="line">q = Auth(access_key, secret_key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_qiniu</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">''' upload file to qiniu'''</span></span><br><span class="line">    dirname, filename = os.path.split(path)</span><br><span class="line">    key = <span class="string">'markdown/%s'</span> % filename <span class="comment"># upload to qiniu's markdown dir</span></span><br><span class="line"></span><br><span class="line">    token = q.upload_token(bucket_name, key)</span><br><span class="line">    ret, info = put_file(token, key, path, check_crc=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> ret != <span class="keyword">None</span> <span class="keyword">and</span> ret[<span class="string">'key'</span>] == key</span><br></pre></td></tr></table></figure></p>
<h2 id="访问剪切版">访问剪切版</h2><p>如果我们进行截图或者复制图片，那么图片是存储在系统的剪切版里面的；要将这个图片上传，必需先从剪切版里面弄出来。</p>
<h3 id="mac">mac</h3><p>mac访问剪切版比较简单，如果是文本类型，那么可以直接使用<code>pbcopy, pbpaste</code>这两个命令解决；如果访问其他的多媒体类型，可以使用系统内置的python与objc的访问接口<code>PyObjC</code>;具体关于剪切版的文档可以参考<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSPasteboard_Class/index.html#//apple_ref/occ/instm/NSPasteboard/dataForType" target="_blank" rel="external">PyObjC文档</a>，<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/#//apple_ref/occ/instm/NSData/writeToFile:atomically:" target="_blank" rel="external">Objc剪切版文档</a>(不会objc没关系，能看懂)</p>
<p>如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># clipboard.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> AppKit <span class="keyword">import</span> NSPasteboard, NSPasteboardTypePNG, NSPasteboardTypeTIFF</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_paste_img_file</span><span class="params">()</span>:</span></span><br><span class="line">    pb = NSPasteboard.generalPasteboard()</span><br><span class="line">    data_type = pb.types()</span><br><span class="line">    <span class="comment"># if img file</span></span><br><span class="line">    <span class="keyword">print</span> data_type</span><br><span class="line">    now = int(time.time() * <span class="number">1000</span>) <span class="comment"># used for filename</span></span><br><span class="line">    <span class="keyword">if</span> NSPasteboardTypePNG <span class="keyword">in</span> data_type:</span><br><span class="line">        <span class="comment"># png</span></span><br><span class="line">        data = pb.dataForType_(NSPasteboardTypePNG)</span><br><span class="line">        filename = <span class="string">'%s.png'</span> % now</span><br><span class="line">        filepath = <span class="string">'/tmp/%s'</span> % filename</span><br><span class="line">        ret = data.writeToFile_atomically_(filepath, <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="keyword">return</span> filepath</span><br><span class="line">    <span class="keyword">elif</span> NSPasteboardTypeTIFF <span class="keyword">in</span> data_type:</span><br><span class="line">        <span class="comment"># tiff</span></span><br><span class="line">        data = pb.dataForType_(NSPasteboardTypeTIFF)</span><br><span class="line">        filename = <span class="string">'%s.tiff'</span> % now</span><br><span class="line">        filepath = <span class="string">'/tmp/%s'</span> % filename</span><br><span class="line">        ret = data.writeToFile_atomically_(filepath, <span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="keyword">return</span> filepath</span><br><span class="line">    <span class="keyword">elif</span> NSPasteboardTypeString <span class="keyword">in</span> data_type:</span><br><span class="line">        <span class="comment"># string todo, recognise url of png &amp; jpg</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Windows">Windows</h3><p>windows下，可以装个pywin32然后使用win32api直接访问，具体如何操作自己解决。</p>
<h2 id="自动化流程">自动化流程</h2><p>先阐述一下要达到的理想状态：用截图工具截图（图片默认保存在剪切版），然后在编辑器按下某个类似于粘贴的快捷键，得到一个上传好了到七牛的marddown格式的图片；</p>
<p>如何达到这个要求呢？上传图片以及到从剪切版获取图片都已经完成，接下来就是这个按键的自动化操作了；在mac上，可以使用Alfred工作流，Windows上，可以使用Autohotkey。</p>
<h3 id="mac下使用alfred工作流">mac下使用alfred工作流</h3><p>使用Alfred新建一个空白的工作流，然后新建一个trigger，快捷键绑定为“ctrl + cmd + v”;然后新建一个run script，选择python;然后填上如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">"&#123;query&#125;"</span></span><br><span class="line"><span class="keyword">from</span> clipboard <span class="keyword">import</span> get_paste_img_file</span><br><span class="line"><span class="keyword">from</span> upload <span class="keyword">import</span> upload_qiniu</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://7sbqce.com1.z0.glb.clouddn.com/markdown"</span></span><br><span class="line"></span><br><span class="line">img_file = get_paste_img_file()</span><br><span class="line"><span class="keyword">if</span> img_file:</span><br><span class="line">    <span class="comment"># has file</span></span><br><span class="line">    ret = upload_qiniu(img_file)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="comment"># upload success</span></span><br><span class="line">        name = os.path.split(img_file)[<span class="number">1</span>]</span><br><span class="line">        markdown_url = <span class="string">"![](%s/%s?imageMogr2/thumbnail/!50p/quality/100!)"</span> % (url, name)</span><br><span class="line">        <span class="comment"># make it to clipboard</span></span><br><span class="line">        os.system(<span class="string">"echo '%s' | pbcopy"</span> % markdown_url)</span><br><span class="line">        os.system(<span class="string">'osascript -e \'tell application "System Events" to keystroke "v" using command down\''</span>)</span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">print</span> <span class="string">"upload_failed"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"get img file failed"</span></span><br></pre></td></tr></table></figure></p>
<p>其中，复制到剪切版以及按下cmd ＋ v复制这个功能，使用的系统命令<code>pbcopy, osascript</code>这体现了python作为胶水语言的强大之处！</p>
<p>这样，这个workflow就完成了，用系统截图工具<code>cmd + option +ctrl + 4</code>截个图，然后在一个编辑器里面按下<code>cmd + ctrl + v</code>看看是什么效果～</p>
<p>另外有个问题是，mac的retina屏幕截图如果直接使用的话，会是原来的两倍大，我用了七牛的API将图片缩小了一半，但是质量却不太好，不知道有什么办法。</p>
<p>更新：使用mac自带的<code>sips</code>工具得到图片的尺寸；然后使用<code>img</code>标签替代markdown格式的图片；然后使用css属性控制这个图片的宽度。<br>更新2: 使用mac通知中心在上传图片失败的时候给出提醒 github地址：<a href="https://github.com/tiann/markdown-img-upload" target="_blank" rel="external">https://github.com/tiann/markdown-img-upload</a></p>
<h3 id="windows下使用autohotkey">windows下使用autohotkey</h3><p>windows下面没有Alfred，但是有强大的AutoHotKey，出发快捷键以及按下ctrl ＋ v完全可以用这个实现；有兴趣的可以自己实现，非常简单。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>markdown写作的时候，图片插入是一件比较麻烦的事情。常见的流程如下：</p>
<ol>
<li>用截图工具截图；</li>
<li>将截图保存到某个地方</li>
<li>修改截图文件名</li>
<li>上传截图到某个图床（如果不用“围脖是个好图床”这样的工具，还得用客户端登陆）</li>
<li>拿到图床上的截图的链接；然后用markdown格式插入图片</li>
</ol>
<p>这么复杂的流程，让人简直没有了插入图片的欲望；但是大量的文字没有图片，必然让人疲惫；</p>
<p>要是能<strong>随便截个图，然后直接粘贴就成了markdown格式</strong>就好了；自然是能够做到！懒就是生产力～<br>]]>
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="workflow" scheme="http://yoursite.com/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[react-native环境搭建的正确姿势]]></title>
    <link href="http://yoursite.com/2015/10/08/problems-when-config-react-native-env/"/>
    <id>http://yoursite.com/2015/10/08/problems-when-config-react-native-env/</id>
    <published>2015-10-08T09:20:14.000Z</published>
    <updated>2015-10-19T02:53:35.000Z</updated>
    <content type="html"><![CDATA[<p>上个月Facebook开源了Android版的react-native，react-native为何物就不多介绍，个人认为虽然取代不了native，但是确实有可能是移动端的未来。</p>
<p>用这个新的工具最开始自然是需要搭建一个开发环境；官网说的可是简单：装好<code>git</code>, <code>nvm</code>等工具，两条命令解决：</p>
<blockquote>
<p><code>npm install -g react-native-cli</code><br><code>react-native init AwesomeProject</code></p>
</blockquote>
<p>但是对于生活在水深火热的天朝的程序员，事情远没有那么简单。接下来给出正确的安装姿势，最后说说我安装过程中遇到的问题。</p>
<a id="more"></a>
<h2 id="正确的安装姿势">正确的安装姿势</h2><h3 id="准备工作">准备工作</h3><p>准备工作包括<code>git, node</code>等工具的安装；安装node的话最好使用一个版本管理工具比如<code>nvm</code>；这个很简单：</p>
<ol>
<li><code>brew install nvm</code> react-native仅支持mac平台，直接brew</li>
<li><code>nvm install node &amp;&amp; nvm alias default node</code></li>
</ol>
<p>如果上面这两步执行失败，那么需要科学上网；去弄一个VPN或者代理吧，没有的话可以联系我给一个shadowsocks账号。</p>
<p>然后清理一下环境：<code>npm cache clean</code></p>
<p>注意，接下来的安装步骤，如果安装过程中断，最好执行上面的命令<strong>清除缓存</strong>；然后如果是初始化工程失败，最好<strong>删除整个工程目录</strong>重新开始。实际的下载安装过程不会超过十分钟；如果超过说明网络有问题，或者下面的步骤没有正确的配置。</p>
<h3 id="手动下载node-gyp需要的源码">手动下载node-gyp需要的源码</h3><p>官方文档并没有提到这个gyp，那么<a href="https://github.com/nodejs/node-gyp" target="_blank" rel="external">node-gyp</a>是什么？</p>
<blockquote>
<p>Node.js native addon build tool</p>
</blockquote>
<p>我们使用npm安装的有些module依赖一些用c/c++编写的模块，这些模块需要本地编译安装；<code>node-gyp</code>就是一个编译工具。<br>为什么要手动安装呢？因为<code>node-gyp</code>编译需要node的源码，第一次使用的时候需要把它下载下来；但是官方的源码源速度非常慢，基本下载不了；这样会导致编译某些模块的时候卡住，我们可以使用国内的镜像手动下载。运行下面的脚本即可：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># js 版本号</span></span><br><span class="line">NODE_VERSION=`node -v | cut <span class="operator">-d</span><span class="string">'v'</span> <span class="operator">-f</span> <span class="number">2</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码包(使用镜像)</span></span><br><span class="line">wget http://npm.taobao.org/mirrors/node/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除现有内容不完整的目录</span></span><br><span class="line">rm -rf ~/.node-gyp</span><br><span class="line">mkdir ~/.node-gyp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩并重命名到正确格式</span></span><br><span class="line">tar zxf node-v<span class="variable">$NODE_VERSION</span>.tar.gz -C ~/.node-gyp</span><br><span class="line">mv ~/.node-gyp/node-v<span class="variable">$NODE_VERSION</span> ~/.node-gyp/<span class="variable">$NODE_VERSION</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个标记文件</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"9\n"</span>&gt;~/.node-gyp/<span class="variable">$NODE_VERSION</span>/installVersion</span><br></pre></td></tr></table></figure></p>
<h3 id="替换npm镜像">替换npm镜像</h3><p>npm官方的源不稳定，我们可以使用国内淘宝的源<a href="http://registry.npm.taobao.org/" target="_blank" rel="external">http://registry.npm.taobao.org/</a> ；执行下面的命令即可：<br><code>npm config set registry=http://registry.npm.taobao.org/</code></p>
<h3 id="配置git代理">配置git代理</h3><p>不能科学上网还是不行的；在安装模块的时候，不仅需要下载模块，还需要下载node源代码；有的还是使用git管理的，而这些库，很有可能就访问不了。<br>如果全部使用代理的话，那么访问国内的镜像也使用了代理，这样会导致速度下降；因此我们只对git设置代理：<br><code>git config --global http.proxy=http://&lt;url&gt;:&lt;port&gt;</code></p>
<p>这些配置完成，那么就可以初始化工程了；一句命令完成：<br><code>react-native init AwesomeProject</code><br>安装完毕之后，可以使用<code>npm ls</code>看一下，这个工程依赖的node模块是有多么复杂，差不多就能理解为什么在天朝配置这个环境有多么麻烦了。</p>
<p>接下来纪录一下我安装过程中遇到的一些问题，不感兴趣可以略过。</p>
<h2 id="遇到的问题">遇到的问题</h2><h3 id="代理和VPN">代理和VPN</h3><p>VPN和代理最大的区别是，VPN对于应用程序就相当于VPN躺在了TCP/IP协议栈里面，所有的网络请求都会通过VPN访问；而代理呢，我们需要给每个要用到代理的程序单独设置代理访问；大多数程序会检测诸如<code>HTTP_PROXY</code>的环境变量来自动使用代理，但是<strong>不是所有的程序都这么乖</strong>。</p>
<p>所以，如果你通过某种方式给系统设置了代理，并不意味着你的每一个程序都会通过代理访问；假如你设置了环境变量<code>HTTP_PROXY</code>那么，系统只是告诉程序有代理可用，至于用不用，是程序自己的问题；如果是VPN，那么程序就算什么都没干，它也是通过VPN访问网络的。</p>
<p>代理这么麻烦，还有一些程序不听话，要是像vpn那样就好了。解决方案自然是有，google<code>Proxifier</code>或者<code>proxycap</code>就行了。</p>
<h3 id="mac系统设置是全局代理吗">mac系统设置是全局代理吗</h3><p>之所以提到mac，是因为react-native官方文档第一条：</p>
<blockquote>
<p>OS X - Only OS X is currently supported</p>
</blockquote>
<p>那么，我们打开<strong>系统偏好设置——网络——高级——代理</strong> 这个设置，然后配置好代理信息，对我们的安装有帮助吗？</p>
<p>事实上，<strong>终端以及一些基于命令行的工具，不会理会系统的代理设置</strong>；具体可以看看<a href="https://discussions.apple.com/thread/2204147?tstart=0" target="_blank" rel="external">这里</a>或者<a href="http://superuser.com/questions/598869/mac-terminal-couldnt-access-network" target="_blank" rel="external">这里</a></p>
<p>所以，在系统这里设置代理对我们没有什么作用。</p>
<h3 id="环境变量的问题">环境变量的问题</h3><p>既然命令行工具不认系统代理设置，那么我们可以在终端手动设置环境变量：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=http://&lt;proxy_url&gt;:&lt;port&gt;</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://&lt;proxy_url&gt;:&lt;port&gt;</span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=http://&lt;proxy_url&gt;:&lt;port&gt;</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://&lt;proxy_url&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure></p>
<p>注意两点：</p>
<ol>
<li>有的工具（没错，说的就是<code>wget,curl</code>！！）对于这个环境变量，是<strong>大小写敏感的！！</strong>，所以最好大写小写都设置。</li>
<li>https的代理url不带https头。</li>
</ol>
<p>很不幸，即使这么做了，依然会出现有一些包下载不下来。看了官方文档才知道，<code>npm</code>设置代理不是这个样子的。要么在一个配置文件<code>.npmrc</code>里面设置，要么通过命令<code>npm config set XXX</code>设置。具体可以参考<a href="http://wil.boayue.com/blog/2013/06/14/using-npm-behind-a-proxy/" target="_blank" rel="external">这篇文章</a></p>
<p>这是怎么一个奇葩的设计啊。看文章可仔细点，设置代理名字跟环境变量不一样！</p>
<h3 id="gyp的问题">gyp的问题</h3><p>你以为到这里就结束了？！ 实际上，我们使用的很多npm的包，用到了一些c/c++的模块，需要编译安装。这个时候，需要依赖node的源代码。但是，由于这个源本身的问题，有了代理速度还是乌龟一般。没有办法，我们只有使用国内的淘宝镜像，先手动安装<code>gyp</code>。</p>
<h3 id="openssl的问题">openssl的问题</h3><p>拜GFW所赐，使用https协议的话很有可能根本没法认证，所以最好吧官方的那个源换成http的；然后设置一下这个选项：<br><code>npm config set strict-ssl false</code></p>
<h3 id="git协议无法clone的问题">git协议无法clone的问题</h3><p>在公司的网络环境下，很多端口被屏蔽了；git也是一样，因此使用git协议的clone的话很有可能失败，因此我们需要用https协议替代git协议；具体设置可以参考<a href="http://stackoverflow.com/questions/15669091/bower-install-using-only-https" target="_blank" rel="external">这里</a><br>OK，这些问题全部解决的话，应该能顺利安装上react-native。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上个月Facebook开源了Android版的react-native，react-native为何物就不多介绍，个人认为虽然取代不了native，但是确实有可能是移动端的未来。</p>
<p>用这个新的工具最开始自然是需要搭建一个开发环境；官网说的可是简单：装好<code>git</code>, <code>nvm</code>等工具，两条命令解决：</p>
<blockquote>
<p><code>npm install -g react-native-cli</code><br><code>react-native init AwesomeProject</code></p>
</blockquote>
<p>但是对于生活在水深火热的天朝的程序员，事情远没有那么简单。接下来给出正确的安装姿势，最后说说我安装过程中遇到的问题。</p>]]>
    
    </summary>
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mac下Android studio快捷键配置]]></title>
    <link href="http://yoursite.com/2015/10/02/configuration-of-idea-android-studio-in-mac/"/>
    <id>http://yoursite.com/2015/10/02/configuration-of-idea-android-studio-in-mac/</id>
    <published>2015-10-02T06:17:47.000Z</published>
    <updated>2015-10-19T02:53:35.000Z</updated>
    <content type="html"><![CDATA[<p>前两天重装了mac系统；之前的配置都丢了，因此纪录一下配置的过程以防惨案再次发生～</p>
<p>快捷键为什么要配置？直接使用不就好！</p>
<p>这个事实基于我们使用vim模拟，IdeaVim；会有一些快捷键的冲突；然后使用HHKB的话，为了契合这个键盘，需要做一些额外的处理。</p>
<p>基于两个前提：</p>
<ol>
<li>ideavim的某些ctrl开头的快捷键与IDE冲突，需要手动解决</li>
<li>使用hhkb键盘，没有上下左右，没有<code>F1..Fn</code>系列不方便</li>
</ol>
<a id="more"></a>
<h3 id="ideavim兼容">ideavim兼容</h3><ol>
<li><code>ctrl + r</code>这个在vim模式下是重做，相对于<code>u</code>(undo)；对于重度vimer必不可少，虽然ide的重做也可以用；这么配置带来一个问题，那就是<code>ctrl + r</code>在IDE里面意思是<code>Run</code>，必须改键；以前习惯<code>shift + F10</code>因为windows这么配置的，但是在hhkb键盘，这个键位要摁三个键：<code>fn,shift,0</code>;二逼地配置为<code>shift + 0</code>之后，发现怎么也打不出<code>)</code>了；最终改为<strong><code>option + r</code></strong>很方便，也好记（run），不冲突。</li>
<li><code>ctrl + a</code> 这个在Vim里面意思是光标所在的数字加一；IDE里面意思都是移到行首，等同于命令行模式下的<code>^</code>，既然选择Vim就用vim的移动方式；在插入模式下要多按键，为了避免换个IDE就傻缺，用Vim；另外IDE 的<code>cmd + ⬅️</code>也有这个意思。</li>
<li><code>ctrl + b</code> IDE是往左移动光标；VIM是向上翻页；写代码要频繁用翻页，说明你得重构了；选IDE。<code>ctrl + f</code>同理（向下翻页）</li>
<li><code>ctrl + e</code>  在vim里面意思是光标不动，屏幕滚动；在IDE里面是移到行尾，道理同<code>ctrl + a</code>选VIM；<code>cmd + ➡️</code>可以使用；</li>
<li><code>ctrl + o</code> 在VIM里面意思是：在插入模式下执行命令然后回到插入模式；太有用了；比如你在插入模式，在括号里面写完了，想去行尾加个分号结束，咋办？用上下左右光标？No！你可以<code>ctrl + o A</code>多么优雅！不管IDE什么意思，必须选择Vim。IDE的意思是<code>override</code>这个必须用的，没办法改了；改成<code>ctrl + i</code>。</li>
<li><code>ctrl + g</code> 在IDE里面在查找里面可以把下一个单词加入选择列表；用的情况比较少；在VIM里面，意思有两个：命令模式下等同于<code>:f</code>显示当前文件路径以及行数；插入模式下是一个前缀 ；<code>ctrl g k</code>等同于<code>ctrl + o gk</code> 所以还不错；选Vim。</li>
<li><code>ctrl + i</code> IDE是实现方法（实际上改成了ctrl ＋ o的意思，不用担心这个包含前者。），很有用；VIm是光标前插入空格；选IDE；</li>
<li><code>ctrl + p</code>以及<code>ctrl + n</code>这个是vim的自动完成；在IDE前面没啥用；IDE里面意思是光标移动，选IDE</li>
<li><code>ctrl + T</code> 在IDE里面这个功能太好用了；重构用的；必须IDE</li>
<li><code>ctrl + v</code> IDE里面是cvs的操作；好用；在Vim里面是进入可视化选择模式，可很有用，但是放心 还有一个快捷键<code>ctrl + q</code>是一样的功能；这个是为了兼容windows的；因为windows这个是粘贴～</li>
</ol>
<p>好了，vim兼容就这么多。</p>
<p>然后配置一些HHKB不好按的键，比如Fn系列；没有这个键盘的话自行略过（真心推荐）；</p>
<h3 id="HHKB修改">HHKB修改</h3><ol>
<li><code>cmd + shift + F12</code> ：隐藏所有工具栏，在需要安静写代码的时候很有用；我很常用；改成<code>ctrl + option + (加号)</code> 因为这个➕在hhkb里面对应F12；</li>
<li><code>cmd + F12</code> ： 显示文件的目录结构；太长用了，在类里面导航全靠这个；改为：<code>option + (加号)</code> 这个比上面那个常用；因此这样。</li>
<li><code>option + F7</code> : 查找谁用了它；超有用，没有之一；添加额外选项：<code>option + 7</code></li>
<li><code>option + cmd + F7</code>: 类似上面的，但是在一个弹出框显示；个人觉得比上面那个好用；上面那个单独的窗口导致有时候切换有可能需要鼠标；不方便，考虑这两个功能对换键位；暂时加上<code>option + cmd + 7</code></li>
<li><code>option + ⬆️</code>：类似windows下面的<code>ctrl + w</code> IDEA最有用的特性之一。但是在HHKB按方向键要两个键，改一下；另外，通常选择之后是复制，所以，最好要用cmd组合；索性改成<code>cmd + w</code>原来这个意思是关闭标签，没啥用；一般不自动关闭的。</li>
</ol>
<p>另外一些需要用到Fn系列键位的，可以自行配置一下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前两天重装了mac系统；之前的配置都丢了，因此纪录一下配置的过程以防惨案再次发生～</p>
<p>快捷键为什么要配置？直接使用不就好！</p>
<p>这个事实基于我们使用vim模拟，IdeaVim；会有一些快捷键的冲突；然后使用HHKB的话，为了契合这个键盘，需要做一些额外的处理。</p>
<p>基于两个前提：</p>
<ol>
<li>ideavim的某些ctrl开头的快捷键与IDE冲突，需要手动解决</li>
<li>使用hhkb键盘，没有上下左右，没有<code>F1..Fn</code>系列不方便</li>
</ol>]]>
    
    </summary>
    
      <category term="ideavim" scheme="http://yoursite.com/tags/ideavim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xfermode in android]]></title>
    <link href="http://yoursite.com/2015/09/23/Xfermode-in-android/"/>
    <id>http://yoursite.com/2015/09/23/Xfermode-in-android/</id>
    <published>2015-09-23T05:10:49.000Z</published>
    <updated>2015-09-25T11:14:11.000Z</updated>
    <content type="html"><![CDATA[<p>Xfermode有三个实现类：AvoidXfermode, PixelXorXfermode以及PorterDuffXfermode。<br>前两个类因为不支持硬件加速在API level 16被标记为Deprecated了，用也可以，但是需要关闭硬件加速，简单说下。</p>
<h2 id="AvoidXfermode">AvoidXfermode</h2><blockquote>
<p> AvoidXfermode xfermode will draw the src everywhere except on top of the<br> opColor or, depending on the Mode, draw only on top of the opColor.</p>
</blockquote>
<p>这话翻译成中文太别扭了，自己理解吧。举个栗子，如果你想对原来图像进行处理，把红色换成绿色，可以使用这个；或者，你想把不是红色的换成某个颜色，也行。这里有一个容差值的概念，比如红色是0xff0000 但是在一定范围内也都是红色，如果你设定一个容差值，那么“各种符合要求的红色”都会被处理。</p>
<a id="more"></a>
<h2 id="PixelXorfermode">PixelXorfermode</h2><p>  文档都说这种模式对于操作混合色没有什么用，还不支持硬件加速，pass，说说重头戏。</p>
<h2 id="PoterDuffXfermode">PoterDuffXfermode</h2><h3 id="Porter-Duff的由来">Porter-Duff的由来</h3><p>说来说去，这个到处都是PorterDuff的玩意儿到底是什么意思？</p>
<blockquote>
<p>Porter-Duff 操作是 1 组 12 项用于描述数字图像合成的基本手法，包括<br>Clear、Source Only、Destination Only、Source Over、Source In、Source<br>Out、Source Atop、Destination Over、Destination In、Destination<br>Out、Destination Atop、XOR。通过组合使用 Porter-Duff 操作，可完成任意 2D<br>图像的合成。<br>Thomas Porter 和 Tom Duff 发表于 1984年原始论文的扫描<a href="http://keithp.com/~keithp/porterduff/p253-porter.pdf" target="_blank" rel="external">版本</a></p>
</blockquote>
<p>看到没！可以完成任意2D图像的合成，理论支撑，所以说是核武器～</p>
<p>###对文档的解释<br>如果去查阅文档这个模式怎么用，相信你一定会fuck：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public enum Mode &#123;</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span> [0, 0] <span class="keyword">*</span>/</span><br><span class="line">    CLEAR       (0),</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span> [Sa, Sc] <span class="keyword">*</span>/</span><br><span class="line">    SRC         (1),</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span> [Da, Dc] <span class="keyword">*</span>/</span><br><span class="line">    DST         (2),</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span> [Sa + (1 - Sa)<span class="keyword">*</span>Da, Rc = Sc + (1 - Sa)<span class="keyword">*</span>Dc] <span class="keyword">*</span>/</span><br><span class="line">    SRC_OVER    (3),</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span> [Sa + (1 - Sa)<span class="keyword">*</span>Da, Rc = Dc + (1 - Da)<span class="keyword">*</span>Sc] <span class="keyword">*</span>/</span><br><span class="line">    DST_OVER    (4),</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span> [Sa <span class="keyword">*</span> Da, Sc <span class="keyword">*</span> Da] <span class="keyword">*</span>/</span><br><span class="line">    SRC_IN      (5),</span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span> [Sa <span class="keyword">*</span> Da, Sa <span class="keyword">*</span> Dc] <span class="keyword">*</span>/</span><br><span class="line">    DST_IN      (6),</span><br><span class="line">    // ...以下省略</span><br></pre></td></tr></table></figure></p>
<p>这尼玛是什么意思。。好了，别慌。如果懂些图形学，大致就知道：<br>Sa = Source alpha<br>Da = Dest alpha<br>Sc = Source color<br>Dc = Dst color<br>如果用叠加的形式看，Dst是下面的图，也就是先画的图；Source是上面的图，也就是后面要画的图。</p>
<p>要说明的是，使用porterduffxfermode绘制的时候，由于窗口时透明的，如果出现<strong>黑色结果</strong>，那么就是这个原因，stackoberflow上有很多这样的<a href="http://stackoverflow.com/questions/18387814/drawing-on-canvas-porterduff-mode-clear-draws-black-why" target="_blank" rel="external">问题</a>答案说需要之前画一个bitmap，原因是对的，但是不应该这么处理，使用layer保存图层即可。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int count = <span class="tag">canvas</span><span class="class">.saveLayer</span></span><br><span class="line">paint.<span class="function"><span class="title">setXfermode</span><span class="params">()</span></span></span><br><span class="line"><span class="tag">canvas</span><span class="class">.drawXXX</span></span><br><span class="line"><span class="tag">canvas</span>.<span class="function"><span class="title">restoreLayer</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="实际效果测试以及mode含义">实际效果测试以及mode含义</h3><p>往上很多对于Xfermode的解释，使用API demo望文生义，并没有考虑到alpha通道的情况，实际上是错误的。典型的解释类似这种：</p>
<blockquote>
<p>4.PorterDuff.Mode.SRC_OVER<br> 正常绘制显示，上下层绘制叠盖。<br>5.PorterDuff.Mode.DST_OVER<br>上下层都显示。下层居上显示。<br>6.PorterDuff.Mode.SRC_IN<br>  取两层绘制交集。显示上层。<br>7.PorterDuff.Mode.DST_IN<br> 取两层绘制交集。显示下层。</p>
</blockquote>
<p>只能说太肤浅了，我们根据上面的图像学的解释，alpha通道的存在意味着事情没那么简单，我们用实际的例子验证一下。<br>验证的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">        <span class="comment">// draw background</span></span><br><span class="line">        canvas.drawColor(Color.WHITE);</span><br><span class="line">        <span class="keyword">int</span> count = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, width, height, p, Canvas.ALL_SAVE_FLAG);</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.scale(<span class="number">0.5f</span>, <span class="number">0.5f</span>, width / <span class="number">2</span>, height / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        canvas.drawBitmap(mDst, <span class="number">0</span>, <span class="number">0</span>, p);</span><br><span class="line">        p.setXfermode(xfermode);</span><br><span class="line">        canvas.drawBitmap(mSrc, <span class="number">0</span>, <span class="number">0</span>, p);</span><br><span class="line">        p.setXfermode(null);</span><br><span class="line">        canvas.restore();</span><br><span class="line"></span><br><span class="line">        canvas.restoreToCount(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这里的mSrc以及mDst分别对应我们绘制的SRC bitmap以及DST bitmap；理论已经解释过了，DST代表先画的，下层图像；SRC是后画的上层图像。测试的图像用代码画出来的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@<span class="function">Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        width = w;</span><br><span class="line">        height = h;</span><br><span class="line">        <span class="keyword">float</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DST Rect</span></span><br><span class="line">        Paint p = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mSrc = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</span><br><span class="line">        mDst = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</span><br><span class="line"></span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(mDst);</span><br><span class="line">        p.setColor(Color.RED);</span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, halfWidth, height, p);</span><br><span class="line">        p.setAlpha(<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">        canvas.drawRect(halfWidth, <span class="number">0</span>, width, height, p);</span><br><span class="line"></span><br><span class="line">        canvas = <span class="keyword">new</span> Canvas(mSrc);</span><br><span class="line">        <span class="comment">// SRC circle</span></span><br><span class="line">        p.setColor(Color.BLUE);</span><br><span class="line">        p.setAlpha((<span class="number">1</span> &lt;&lt; <span class="number">8</span>) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> radius = Math.min(height, width) / <span class="number">2</span>;</span><br><span class="line">        mSrcRect.<span class="built_in">set</span>(width / <span class="number">2</span> - radius, height / <span class="number">2</span> - radius, width / <span class="number">2</span> + radius, height / <span class="number">2</span> + radius);</span><br><span class="line">        canvas.drawArc(mSrcRect, <span class="number">0</span>, <span class="number">180</span>, <span class="literal">true</span>, p);</span><br><span class="line">        p.setAlpha(<span class="number">1</span> &lt;&lt; <span class="number">7</span>);</span><br><span class="line">        canvas.drawArc(mSrcRect, <span class="number">180</span>, <span class="number">180</span>, <span class="literal">true</span>, p);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>注意到，每一个图都有半透明和全透明的两周状态，画出来，肉眼看到效果如下：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/bdea3ba636d6818d213404e2b8715141.png?imageMogr2/thumbnail/!50p" alt="Src"><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/b1b7ff836a928e412a92425cfbac872d.png?imageMogr2/thumbnail/!50p" alt="DST"></p>
<h4 id="SRC和DST">SRC和DST</h4><p>这个就不是解释了，SRC - [Sa, Sc]只有源图像的alpha和颜色，因此只保留源图像；DST也是一样。</p>
<p>####SRC_OVER<br> [ Sa +(1-Sa) <em> Da , Rc = Sc +( 1- Sa ) </em> Dc ]。从名字上看，从DST上面绘制SRC图像（透明度的叠加）：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/44464b24373b955088f469bc0123348e.png?imageMogr2/thumbnail/!50p" alt="SRC_OVER"></p>
<p>####DST_OVER<br>[Sa + ( 1 - Sa ) <em> Da ,Rc = Dc + ( 1 - Da ) </em> Sc ]。与上面情况差不多，看看效果：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/d48a3385baf33b1e1eda1e68d65a6be5.png?imageMogr2/thumbnail/!50p" alt="DST_OVER"></p>
<h4 id="SRC_IN">SRC_IN</h4><p>[ Sa <em> Da , Sc </em> Da ]。注意，alpha通道是SRC和DSTalpha的乘法叠加；颜色是SRC颜色与DSTalpha通道的叠加；考虑一下，我们的图像应该是个什么样子；首先确定图像范围。什么时候才会有图像呢，rgb应该有分量，alpha不能为0；所以rgb分量里面只有SRC，说明图像里面区域里面只有源图像；alpha通道只有DST，当DSTalpha为0的地方没有图像（这句话有两个意思，在DST完全透明的地方不存在源图像）简而言之，就是在相交的地方绘制源图像；但是绘制的alpha通道受DST影响：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/ae37f07bc86754f334dc4f509cf6acc6.png?imageMogr2/thumbnail/!50p" alt="SRC_IN"></p>
<h4 id="DST_IN">DST_IN</h4><p>[ Sa <em> Da , Sa </em> Dc ]。按照上面的理解。在相交的地方绘制DST，但是alpha受SRC影响：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/323dbf2cb54e951a4a9d307ee4d53eb4.png?imageMogr2/thumbnail/!50p" alt="DST_IN"></p>
<h4 id="SRC_OUT">SRC_OUT</h4><p>很多地方解释说：</p>
<blockquote>
<p>取上层绘制非交集部分。<br>在不相交的地方绘制 源图像。</p>
</blockquote>
<p>我们看看是不是这样：<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/a98043e9bdb9c64ce845dffc27bea020.png?imageMogr2/thumbnail/!50p" alt="SRC_OUT"><br>说好的在不相交的地方绘制源图像呢？如果是这个意思，因为DST包含SRC，那么应该整个应该是什么都没有（待商榷，下面说）。为什么相交的地方还是有源图像？</p>
<p>看看这个porterduff公式：[ Sa <em> ( 1 - Da ) , Sc </em> ( 1 - Da ) ]<br>这里对应的rgb是<code>Sc * (1 - Da)</code>,</p>
<ol>
<li>在不相交的地方Da肯定是0，那么不相交的地方就是Sc也就是完全是SRC图像；</li>
<li>在相交的地方是<code>Sc * (1 - Da)</code>也就是虽然是SRC的颜色，但是受到DST的alpha通道的影响。</li>
<li>在相交地方的特殊情况，如果DST完全不透明，那么Da ＝ 1；这时候这个表达式值就是0；也就是通常的解释“绘制非交集部分（交集部分没有图像）”</li>
</ol>
<p>总结一下，这种模式应该是：<strong>在不相交的地方绘制源图像，在相交处根据DST的alpha进行过滤；</strong>特殊情况下相交处DST不透明，那么相交处没有颜色，如果完全透明（相当于没有DST图像）</p>
<h4 id="DST_OUT">DST_OUT</h4><p> [ Da <em> ( 1 - Sa ) , Dc </em> ( 1 - Sa ) ] 与上面解释类似，不赘述。<br> <img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/ce26aec4b49f6acfe068b34b01624816.png?imageMogr2/thumbnail/!50p" alt="DST_OUT"></p>
<h4 id="SRC_ATOP">SRC_ATOP</h4><p> [ Da , Sc <em> Da + ( 1 - Sa ) </em> Dc ]。与上面两种模式解释差不多，有一点不同。<br> <strong>源图像和目标图像相交处绘制源图像，不相交的地方绘制目标图像，并且相交处的效果会受到源图像和目标图像alpha的影响；</strong><br> <img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/615a9819236eff103e67f66a5eeec253.png?imageMogr2/thumbnail/!50p" alt="SRC_ATOP"></p>
<h4 id="DST_ATOP">DST_ATOP</h4><p>[ Sa , Sa <em> Dc + Sc </em> ( 1 - Da ) ]，直接上解释。<br><strong>源图像和目标图像相交处绘制目标图像，不相交的地方绘制源图像，并且相交处的效果会受到源图像和目标图像alpha的影响；</strong><br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/8f684c7abec84b009050626104a60047.png?imageMogr2/thumbnail/!50p" alt="DST_ATOP"></p>
<h4 id="XOR">XOR</h4><p>[ Sa + Da - 2 <em> Sa </em> Da, Sc <em> ( 1 - Da ) + ( 1 - Sa ) </em> Dc ]<br><strong>在不相交的地方按原样绘制源图像和目标图像，相交的地方受到对应alpha和色值影响。</strong>按上面公式进行计算，如果都完全不透明则相交处完全不绘制；<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/6c6f1660106e7b28493e1b0d133fb65c.png?imageMogr2/thumbnail/!50p" alt="XOR"></p>
<h4 id="DARKEN">DARKEN</h4><p>[ Sa + Da - Sa <em> Da , Sc </em> ( 1 - Da ) + Dc * ( 1 - Sa ) + min(Sc , Dc) ]<br>从算法上看，alpha值变大，色值上如果都不透明则取较暗值，非完全不透明情况下使用上面算法进行计算，受到源图和目标图对应色值和alpha值影响；正如名字所说，会感觉效果变暗，即进行对应像素的比较，取较暗值，如果色值相同则进行混合；<br><img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/9f5083ff696b21876730d751ba59cd9b.png?imageMogr2/thumbnail/!50p" alt="DSARKEN"></p>
<p>####LIGHTEN<br> [ Sa + Da - Sa <em> Da , Sc </em> ( 1 -Da ) + Dc * ( 1 - Sa ) + max ( Sc , Dc ) ]<br> 与DARKEN相反，LIGHTEN 的目的则是变亮，如果在均完全不透明的情况下 ，色值取源色值和目标色值中的较大值，否则按上面算法进行计算；<br> <img src="http://7sbqce.com1.z0.glb.clouddn.com/markdown/32bf36e760b74332bb1e901df98e8334.png?imageMogr2/thumbnail/!50p" alt="LIGHTEN"></p>
<p>接下来四种 <strong>MULTIFY</strong>，<strong>SCREEN</strong>，<strong>ADD</strong>，<strong>OVERLAY</strong>就不说了，产生的结果不太确定。自己查阅文档吧。<br>emphasized text</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Xfermode有三个实现类：AvoidXfermode, PixelXorXfermode以及PorterDuffXfermode。<br>前两个类因为不支持硬件加速在API level 16被标记为Deprecated了，用也可以，但是需要关闭硬件加速，简单说下。</p>
<h2 id="AvoidXfermode">AvoidXfermode</h2><blockquote>
<p> AvoidXfermode xfermode will draw the src everywhere except on top of the<br> opColor or, depending on the Mode, draw only on top of the opColor.</p>
</blockquote>
<p>这话翻译成中文太别扭了，自己理解吧。举个栗子，如果你想对原来图像进行处理，把红色换成绿色，可以使用这个；或者，你想把不是红色的换成某个颜色，也行。这里有一个容差值的概念，比如红色是0xff0000 但是在一定范围内也都是红色，如果你设定一个容差值，那么“各种符合要求的红色”都会被处理。</p>]]>
    
    </summary>
    
      <category term="2D graphics" scheme="http://yoursite.com/tags/2D-graphics/"/>
    
      <category term="Xfermode" scheme="http://yoursite.com/tags/Xfermode/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="UI" scheme="http://yoursite.com/categories/Android/UI/"/>
    
  </entry>
  
</feed>
